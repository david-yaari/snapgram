name: Build and Deploy to NuGet

on:
  push:
    branches:
      - main # or replace with the name of your default branch
    paths:
      - 'infrastructure/Common.Logging/src/Common.Logging/**' # adjust this to the path of your project's source code
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_PATH: infrastructure/Common.Logging/src/Common.Logging
      PROJECT_PATH_TEST: infrastructure/Common.Logging/src/Common.Logging.Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # adjust this to your project's .NET version

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}/Common.Logging.csproj

      - name: Build
        run: dotnet build ${{ env.PROJECT_PATH }}/Common.Logging.csproj --configuration Release --no-restore

      - name: Restore test dependencies
        run: dotnet restore ${{ env.PROJECT_PATH_TEST }}/Common.Logging.Tests.csproj

      - name: Test
        run: dotnet test ${{ env.PROJECT_PATH_TEST }}/Common.Logging.Tests.csproj --no-restore

      - name: Increment NuGet version
        run: |
          CURRENT_VERSION=$(grep -oP '(?<=<Version>).*?(?=</Version>)' ${{ env.PROJECT_PATH }}/Common.Logging.csproj)
          NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. -v OFS=. '{$NF++;print}')
          sed -i "s/<Version>$CURRENT_VERSION/<Version>$NEW_VERSION/g" ${{ env.PROJECT_PATH }}/Common.Logging.csproj

      - name: Pack
        run: dotnet pack ${{ env.PROJECT_PATH }}/Common.Logging.csproj --configuration Release --no-build --include-symbols --output out --include-source

      - name: Push to GitHub Packages
        run: dotnet nuget push "out/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/david-yaari/index.json
